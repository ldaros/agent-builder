/**
 * A message in the agent's conversation.
 */
export type Message = {
    role: "user" | "assistant" | "system" | "tool";
    content: string;
};

/**
 * Extra parameters for execution.
 * Used to pass additional information to the model and logger.
 */
export type ExecutionParams = {
    contextID?: string;
    custom?: any;
};

/**
 * Metadata about the model response.
 */
export type ModelMetadata = {
    model?: string;
    inputTokens?: number;
    outputTokens?: number;
    totalTokens?: number;
};

/**
 * Metadata about the agent response.
 */
export type AgentMetadata = {
    parser?: string;
    tool?: string;
};

/**
 * The output of a model, including metadata.
 */
export type ModelOutput = {
    generated: Message;
    params?: ExecutionParams;
    modelMetadata?: ModelMetadata;
};

/**
 * The output of a tool executor.
 */
export type ToolExecutorOutput = {
    toolName?: string;
    toolOutput?: string;
};

/**
 * The output of an agent.
 */
export type AgentOutput<T> = {
    data: T;
    agentMetadata?: AgentMetadata;
} & ModelOutput;

/**
 * The result of executing a tool.
 */
export type ToolExecutionResult = {
    output: string;
    error?: string;
};

/**
 * A model implements a unified interface for interacting with different LLMs.
 */
export interface IModel {
    generate(prompt: Message[], params?: ExecutionParams): Promise<ModelOutput>;
}

/**
 * A logger is responsible for logging messages generated by the agent.
 * It can be used to debug or monitor the agent's behavior.
 */
export interface ILogger {
    log(messages: Message[], params?: ExecutionParams): void;
}

/**
 * A parser is responsible for converting unstructured text into a specific format.
 * It can be used to parse text into a structured format, such as JSON or XML.
 */
export interface IParser<T> {
    name: string;

    parse(text: string): Promise<T>;
    getInstructions?(): string;
}

/**
 * A tool is a function that can be executed by the agent.
 * It can be used to perform specific tasks or provide additional functionality.
 */
export interface ITool {
    name: string;
    description: string;
    schema: any;

    execute(args: any): Promise<ToolExecutionResult>;
}
